- cache ["video_show", @video.youtube_id] do
  - content_for :meta_title, primary_title(@video)
  - content_for :meta_description, @video.display.any_song_attributes
  - content_for :meta_image, "https://img.youtube.com/vi/#{@video.youtube_id}/hqdefault.jpg"
  .container
    .stack
      .video data-controller="youtube" data-youtube-video-id-value="#{@video.youtube_id}" data-youtube-start-seconds-value="#{@start_value}" data-youtube-end-seconds-value="#{@end_value}" data-youtube-playback-rate-value="#{@playback_rate}"
        div data-youtube-target="frame"
      .stack
        = render partial: "videos/show/video_info_primary"
        .columns
          .column
            = render partial: "videos/show/video_info_details"
          .column
            = render partial: "videos/show/recommended_videos", locals: { videos: @videos_from_this_performance, header: t(".recommended_videos_videos_from_this_performance_header") }
            = render partial: "videos/show/recommended_videos", locals: { videos: @videos_with_same_dancers, header: t(".recommended_videos_from_performers", dancer: @video.leaders.first.name.titleize, partner: @video.followers.first.name.titleize) } if @video.leaders.present? && @video.followers.present?
            = render partial: "videos/show/recommended_videos", locals: { videos: @videos_with_same_event, header: t(".recommended_from_event", event_title: @video.event.title) } if @video.event.present?
            = render partial: "videos/show/recommended_videos", locals: { videos: @videos_with_same_song, header: t(".recommended_videos_song", song_title: @video.song.title.titleize, song_artist: @video.song.artist.titleize) } if @video.song.present?
            = render partial: "videos/show/recommended_videos", locals: { videos: @videos_with_same_channel, header: t(".recommended_videos_same_channel", channel_title: @video.channel.title) }
